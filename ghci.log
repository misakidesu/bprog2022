GHCi, version 9.0.2: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /home/misaki/bprog2022/.ghci
2022-05-19 15:41:33.62143512
>>> 3＋2 × 5

<interactive>:1:2: error:
    Variable not in scope: (＋) :: t0 -> t1 -> t2

<interactive>:1:5: error:
    Variable not in scope: (×) :: t2 -> t3 -> t
2022-05-19 15:55:32.558556788
>>> 3 + 2 × 5

<interactive>:2:7: error:
    Variable not in scope: (×) :: t0 -> t1 -> t
2022-05-19 15:56:17.662064311
>>> 23＋5

<interactive>:3:3: error:
    Variable not in scope: (＋) :: t0 -> t1 -> t
2022-05-19 15:56:57.713597279
>>> 3 + 2
5
2022-05-19 15:57:37.827958476
>>> 3 × 5

<interactive>:5:3: error:
    Variable not in scope: (×) :: t0 -> t1 -> t
2022-05-19 15:58:04.385850979
>>> 3 × 3

<interactive>:6:3: error:
    Variable not in scope: (×) :: t0 -> t1 -> t
2022-05-19 15:58:58.814783141
>>> sqrt 2
1.4142135623730951
2022-05-19 15:59:19.334604902
>>> sqrt 2
1.4142135623730951
2022-05-19 15:59:43.611929517
>>> dowble 3

<interactive>:9:1: error: Variable not in scope: dowble :: t0 -> t
2022-05-19 16:02:21.730622415
>>> >>> 5 x 3

<interactive>:10:1: error: parse error on input ‘>>>’
2022-05-19 16:14:53.491587551
>>> 5 x 3

<interactive>:11:3: error: Variable not in scope: x
2022-05-19 16:15:05.047203577
>>> 5
5
2022-05-19 16:15:09.156214452
>>> 5 × 3

<interactive>:13:3: error:
    Variable not in scope: (×) :: t0 -> t1 -> t
2022-05-19 16:15:20.649017879
>>> 5 *　3
15
2022-05-19 16:15:50.81547604
>>> GHCi, version 9.0.2: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /home/misaki/bprog2022/.ghci
2022-05-26 15:02:13.291537772
>>> maxBound :: Int
9223372036854775807
2022-05-26 15:03:30.944771203
>>> 2 ^ 63 - 1
9223372036854775807
2022-05-26 15:05:15.653476243
>>> minBound :: Int
-9223372036854775808
2022-05-26 15:05:31.528972426
>>> >>>:l src/First.hs

<interactive>:4:1: error: parse error on input ‘>>>:’
2022-05-26 15:49:09.530851498
>>> :e scr/First.hs
catn: scr/First.hs: openFile: does not exist (No such file or directory)
2022-05-26 15:49:53.641080895
>>> :l scr/First.hs

<no location info>: error: can't find file: scr/First.hs
Failed, no modules loaded.
2022-05-26 15:49:53.72216125
>>> :e src/First.hs
   1  module First where
   2  
   3  double :: Int -> Int
   4  double x = x + x

<no location info>: error: can't find file: scr/First.hs
Failed, no modules loaded.
2022-05-26 15:50:36.435949734
>>> :l src/First.hs
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-05-26 15:50:36.536283583
>>> double 3
6
2022-05-26 15:56:25.249256259
>>> double123

<interactive>:10:1: error: Variable not in scope: double123
2022-05-26 15:56:34.702814606
>>> double 123
246
2022-05-26 15:56:46.797111929
>>> double (1 + 2）

<interactive>:12:14: error: lexical error at end of input
2022-05-26 15:57:29.558640167
>>> double (1 + 2

<interactive>:13:14: error:
    parse error (possibly incorrect indentation or mismatched brackets)
2022-05-26 15:58:07.909110524
>>> double (1 +　2）

<interactive>:14:14: error: lexical error at end of input
2022-05-26 15:58:39.699633037
>>> double (1 +

<interactive>:15:12: error:
    parse error (possibly incorrect indentation or mismatched brackets)
2022-05-26 15:59:06.674140572
>>> double (1 + 2)
6
2022-05-26 15:59:34.802148706
>>> :q
Leaving GHCi.
GHCi, version 9.0.2: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /home/misaki/bprog2022/.ghci
2022-06-09 14:55:13.618978706
>>> 2 + 3 * 4
14
2022-06-09 14:58:32.871445268
>>> >>> (2 + 3) * 4

<interactive>:2:1: error: parse error on input ‘>>>’
2022-06-09 15:00:49.302200728
>>> (2 + 3) * 4
20
2022-06-09 15:01:10.900967798
>>> :i sqrt
type Floating :: * -> Constraint
class Fractional a => Floating a where
  ...
  sqrt :: a -> a
  ...
  	-- Defined in ‘GHC.Float’
2022-06-09 15:01:30.351216896
>>> q

<interactive>:5:1: error: Variable not in scope: q
2022-06-09 15:01:51.240278167
>>> sqrt (3 ^ 2 + 4 ^ 2)
5.0
2022-06-09 15:03:34.018701194
>>> 
2022-06-09 15:07:02.560775513
>>> sqrt (25 :: Int)

<interactive>:8:1: error:
    • No instance for (Floating Int) arising from a use of ‘sqrt’
    • In the expression: sqrt (25 :: Int)
      In an equation for ‘it’: it = sqrt (25 :: Int)
2022-06-09 15:08:05.643683507
>>> sqrt (25 :: Double)
5.0
2022-06-09 15:09:20.6551596
>>> hoge 25 :: Int

<interactive>:10:1: error: Variable not in scope: hoge :: t0 -> Int
2022-06-09 15:13:24.065050997
>>> 
2022-06-09 15:15:25.130682935
>>> 
2022-06-09 15:46:24.873031112
>>> head [1, 2, 3]
1
2022-06-09 15:47:38.41120811
>>> head [3, 1, 4, 1, 5]
3
2022-06-09 15:48:22.892345152
>>> head []
*** Exception: Prelude.head: empty list
2022-06-09 15:48:33.812709509
>>> hoge = [3, 1, 4, 1, 5] :: [Int]
2022-06-09 15:50:36.755221189
>>> hoge
[3,1,4,1,5]
2022-06-09 15:50:51.30274428
>>> head hoge
3
2022-06-09 15:51:23.243258908
>>> taill hoge

<interactive>:19:1: error:
    • Variable not in scope: taill :: [Int] -> t
    • Perhaps you meant ‘tail’ (imported from Prelude)
2022-06-09 15:51:32.550646351
>>> tail hoge
[1,4,1,5]
2022-06-09 15:51:39.918599283
>>> tail []
*** Exception: Prelude.tail: empty list
2022-06-09 15:52:33.835386008
>>> hoge !! 0
3
2022-06-09 15:55:06.651972966
>>> hoge 2 !!

<interactive>:23:10: error:
    parse error (possibly incorrect indentation or mismatched brackets)
2022-06-09 15:56:19.673738217
>>> hoge !! 2
4
2022-06-09 15:56:30.325819611
>>> take 3 hoge
[3,1,4]
2022-06-09 15:56:40.024843465
>>> drop 3 hoge
[1,5]
2022-06-09 15:57:22.649494053
>>> hoge 5 hoge

<interactive>:27:1: error:
    • Couldn't match expected type: t0 -> [Int] -> t
                  with actual type: [Int]
    • The function ‘hoge’ is applied to two value arguments,
        but its type ‘[Int]’ has none
      In the expression: hoge 5 hoge
      In an equation for ‘it’: it = hoge 5 hoge
    • Relevant bindings include it :: t (bound at <interactive>:27:1)
2022-06-09 15:58:24.535231195
>>> hoge 5

<interactive>:28:1: error:
    • Couldn't match expected type: t0 -> t
                  with actual type: [Int]
    • The function ‘hoge’ is applied to one value argument,
        but its type ‘[Int]’ has none
      In the expression: hoge 5
      In an equation for ‘it’: it = hoge 5
    • Relevant bindings include it :: t (bound at <interactive>:28:1)
2022-06-09 15:58:49.965662477
>>> take 10

<interactive>:29:1: error:
    • No instance for (Show ([a0] -> [a0]))
        arising from a use of ‘print’
        (maybe you haven't applied a function to enough arguments?)
    • In a stmt of an interactive GHCi command: print it
2022-06-09 15:59:14.035274209
>>> length hoge
5
2022-06-09 16:01:08.360540084
>>> length []
0
2022-06-09 16:01:37.24592283
>>> sum hoge
14
2022-06-09 16:02:25.187226189
>>> product hoge
60
2022-06-09 16:02:33.174281795
>>> hoge ++ hoge
[3,1,4,1,5,3,1,4,1,5]
2022-06-09 16:05:05.314552445
>>> reverse hoge
[5,1,4,1,3]
2022-06-09 16:06:48.193818118
>>> :e src/First.hs
   1  module First where
   2  
   3  double :: Int -> Int
   4  double x = x + x
Ok, no modules loaded.
2022-06-09 16:07:55.14642251
>>> :load src/First.hs
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-06-09 16:07:55.17778907
>>> double 3 + 3
9
2022-06-09 16:08:15.757473909
>>> double (3 + 3)
12
2022-06-09 16:11:28.360321311
>>> quadruple 2

<interactive>:40:1: error:
    Variable not in scope: quadruple :: t0 -> t
2022-06-09 16:14:53.922091204
>>> quadruple 2

<interactive>:41:1: error:
    Variable not in scope: quadruple :: t0 -> t
2022-06-09 16:15:08.504156498
>>> :quit
Leaving GHCi.
GHCi, version 9.0.2: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /home/misaki/bprog2022/.ghci
2022-06-16 15:02:05.955746837
>>> take 3 [3,1,4,1,5]
[3,1,4]
2022-06-16 15:04:40.711753048
>>> :e src/First.hs
   1  module First where
   2  
   3  double :: Int -> Int
   4  double x = x + x
   5  
   6  quadruple :: Int -> Int
   7  quadruple x = double (double x)
Ok, no modules loaded.
2022-06-16 15:10:41.992888998
>>> :l src/First.hs
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-06-16 15:10:42.026783541
>>> 
2022-06-16 15:11:38.983794191
>>> double

<interactive>:5:1: error:
    • No instance for (Show (Int -> Int)) arising from a use of ‘print’
        (maybe you haven't applied a function to enough arguments?)
    • In a stmt of an interactive GHCi command: print it
2022-06-16 15:12:56.73711731
>>> take (double 2) [1,2,3,4,5]
[1,2,3,4]
2022-06-16 15:15:27.400627252
>>> [1 .. 10]
[1,2,3,4,5,6,7,8,9,10]
2022-06-16 15:20:23.457487131
>>> :e
   1  module First where
   2  
   3  double :: Int -> Int
   4  double x = x + x
   5  
   6  quadruple :: Int -> Int
   7  quadruple x = double (double x)
   8  
   9  factorial :: Integer -> Integer
  10  factorial n = product [1 .. n]
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-06-16 15:20:55.092266481
>>> factorial 3
6
2022-06-16 15:21:56.586562718
>>> factorial 4
24
2022-06-16 15:22:15.079362642
>>> :e
   1  module First where
   2  
   3  double :: Int -> Int
   4  double x = x + x
   5  
   6  quadruple :: Int -> Int
   7  quadruple x = double (double x)
   8  
   9  factorial :: Integer -> Integer
  10  factorial n = product [1 .. n]
  11  
  12  average :: [Int] -> Int
  13  average xs = sum xs `div` length xs
  14  
  15  ave :: [Int] -> Int
  16  ave xs = div (sum xs) (length xs)
  17  
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-06-16 15:39:23.277023309
>>> average [1,2,3,4,5]
3
2022-06-16 15:40:02.043811558
>>> :t take 3 [1,2,3,4,5]
take 3 [1,2,3,4,5] :: Num a => [a]
2022-06-16 15:49:51.542707839
>>> init [1 .. 5]
[1,2,3,4]
2022-06-16 16:07:01.979623415
>>> :e
   1  module First where
   2  
   3  double :: Int -> Int
   4  double x = x + x
   5  
   6  quadruple :: Int -> Int
   7  quadruple x = double (double x)
   8  
   9  factorial :: Integer -> Integer
  10  factorial n = product [1 .. n]
  11  
  12  average :: [Int] -> Int
  13  average xs = sum xs `div` length xs
  14  
  15  ave :: [Int] -> Int
  16  ave xs = div (sum xs) (length xs)
  17  
  18  myinit :: [a] -> [a]
  19  myinit (x:[]) = []
  20  myinit (x:xs) = x : (init xs)
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-06-16 16:14:23.344780092
>>> myinit [1 .. 5]
[1,2,3,4]
2022-06-16 16:14:47.472742525
>>> myinit []
*** Exception: src/First.hs:(19,1)-(20,29): Non-exhaustive patterns in function myinit

2022-06-16 16:14:57.216798537
>>> :q
Leaving GHCi.
GHCi, version 9.0.2: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /home/misaki/bprog2022/.ghci
2022-06-23 14:54:45.591240575
>>> :i Num
type Num :: * -> Constraint
class Num a where
  (+) :: a -> a -> a
  (-) :: a -> a -> a
  (*) :: a -> a -> a
  negate :: a -> a
  abs :: a -> a
  signum :: a -> a
  fromInteger :: Integer -> a
  {-# MINIMAL (+), (*), abs, signum, fromInteger, (negate | (-)) #-}
  	-- Defined in ‘GHC.Num’
instance Num NominalDiffTime
  -- Defined in ‘time-1.9.3:Data.Time.Clock.Internal.NominalDiffTime’
instance Num DiffTime
  -- Defined in ‘time-1.9.3:Data.Time.Clock.Internal.DiffTime’
instance Num Word -- Defined in ‘GHC.Num’
instance Num Integer -- Defined in ‘GHC.Num’
instance Num Int -- Defined in ‘GHC.Num’
instance Num Float -- Defined in ‘GHC.Float’
instance Num Double -- Defined in ‘GHC.Float’
2022-06-23 14:56:29.1610781
>>> 1 == 2
False
2022-06-23 15:06:14.013837784
>>> 1 <2
True
2022-06-23 15:06:27.137942235
>>> 1 < 1
False
2022-06-23 15:06:35.562064333
>>> 1 <= 2
True
2022-06-23 15:06:43.328901566
>>> 1 >- 2

<interactive>:6:3: error:
    • Variable not in scope: (>-) :: t0 -> t1 -> t
    • Perhaps you meant one of these:
        ‘-’ (imported from Prelude), ‘>=’ (imported from Prelude),
        ‘>>’ (imported from Prelude)
2022-06-23 15:07:09.036362468
>>> 1 >= 2
False
2022-06-23 15:07:20.17813679
>>> 'a' < 'b'
True
2022-06-23 15:11:20.986852698
>>> 'a' < 'B'
False
2022-06-23 15:11:33.65408997
>>> '' < 'a'

<interactive>:10:1: error:
    Parser error on `''`
    Character literals may not be empty
2022-06-23 15:12:12.592831906
>>> 'ab' < 'b'

<interactive>:11:1: error:
    • Syntax error on 'ab'
      Perhaps you intended to use TemplateHaskell or TemplateHaskellQuotes
    • In the Template Haskell quotation 'ab'
2022-06-23 15:12:58.48726361
>>> 1 /= 2
True
2022-06-23 15:16:17.487027079
>>> 1 /= 1
False
2022-06-23 15:16:23.112193829
>>> info sbd

<interactive>:14:1: error: Variable not in scope: info :: t0 -> t

<interactive>:14:6: error:
    • Variable not in scope: sbd
    • Perhaps you meant ‘snd’ (imported from Prelude)
2022-06-23 15:30:18.856585696
>>> info abs

<interactive>:15:1: error:
    Variable not in scope: info :: (a0 -> a0) -> t
2022-06-23 15:30:27.492216221
>>> abs

<interactive>:16:1: error:
    • No instance for (Show (Integer -> Integer))
        arising from a use of ‘print’
        (maybe you haven't applied a function to enough arguments?)
    • In a stmt of an interactive GHCi command: print it
2022-06-23 15:30:53.994908009
>>> abs (-234)
234
2022-06-23 15:34:50.081888906
>>> GHCi, version 9.0.2: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /home/misaki/bprog2022/.ghci
2022-06-30 14:57:33.730969011
>>> [ x ^ 2 | x <- [1 .. 5] ]
[1,4,9,16,25]
2022-06-30 15:01:53.545523782
>>> map (^2) [1..5]
[1,4,9,16,25]
2022-06-30 15:11:32.681442399
>>> [ x * 2 | x <- [1..5] ]
[2,4,6,8,10]
2022-06-30 15:12:04.752218176
>>> [x `div` 2 | x <- [1..5]

<interactive>:4:25: error:
    parse error (possibly incorrect indentation or mismatched brackets)
2022-06-30 15:13:32.878728805
>>> [ x `div` 2 | x <- [1..5]]
[0,1,1,2,2]
2022-06-30 15:14:11.147502267
>>> [ x `divMod` 2 | x <- [1..5]]
[(0,1),(1,0),(1,1),(2,0),(2,1)]
2022-06-30 15:16:15.533404418
>>> [ (x, y) | x <- "abc" , y <- [4,5] 

<interactive>:7:36: error:
    parse error (possibly incorrect indentation or mismatched brackets)
2022-06-30 15:21:14.21639754
>>> [ (x, y) | x <- "abc" , y <- [4,5] ]
[('a',4),('a',5),('b',4),('b',5),('c',4),('c',5)]
2022-06-30 15:21:28.690822142
>>> [ (x, y) | y <- [4,5], x <- [abc]

<interactive>:9:34: error:
    parse error (possibly incorrect indentation or mismatched brackets)
2022-06-30 15:22:38.253388912
>>> [ (x, y) | y <- [4,5], x <- [abc] ]

<interactive>:10:30: error:
    • Variable not in scope: abc
    • Perhaps you meant ‘abs’ (imported from Prelude)
2022-06-30 15:23:11.507015086
>>> [ (x, y) | y <- [4,5], x <- "abc" 

<interactive>:11:35: error:
    parse error (possibly incorrect indentation or mismatched brackets)
2022-06-30 15:26:02.920845249
>>> [ (x, y) | y <- [4,5], x <- "abc"]
[('a',4),('b',4),('c',4),('a',5),('b',5),('c',5)]
2022-06-30 15:26:33.094490088
>>> :e src/First.hs
   1  module First where
   2  
   3  double :: Int -> Int
   4  double x = x + x
   5  
   6  quadruple :: Int -> Int
   7  quadruple x = double (double x)
   8  
   9  factorial :: Integer -> Integer
  10  factorial n = product [1 .. n]
  11  
  12  average :: [Int] -> Int
  13  average xs = sum xs `div` length xs
  14  
  15  ave :: [Int] -> Int
  16  ave xs = div (sum xs) (length xs)
  17  
  18  myinit :: [a] -> [a]
  19  myinit (x:[]) = []
  20  myinit (x:xs) = x : (init xs)
  21  
  22  myconcat :: [[a]] ->
Ok, no modules loaded.
2022-06-30 15:29:38.727564323
>>> :l src/First.hs
[1 of 1] Compiling First            ( src/First.hs, interpreted )

src/First.hs:22:21: error:
    parse error (possibly incorrect indentation or mismatched brackets)
   |
22 | myconcat :: [[a]] ->
   |                     ^
Failed, no modules loaded.
2022-06-30 15:29:38.762418384
>>> :e src/First.hs
   1  module First where
   2  
   3  double :: Int -> Int
   4  double x = x + x
   5  
   6  quadruple :: Int -> Int
   7  quadruple x = double (double x)
   8  
   9  factorial :: Integer -> Integer
  10  factorial n = product [1 .. n]
  11  
  12  average :: [Int] -> Int
  13  average xs = sum xs `div` length xs
  14  
  15  ave :: [Int] -> Int
  16  ave xs = div (sum xs) (length xs)
  17  
  18  myinit :: [a] -> [a]
  19  myinit (x:[]) = []
  20  myinit (x:xs) = x : (init xs)
  21  
  22  myconcat :: [[a]] ->
[1 of 1] Compiling First            ( src/First.hs, interpreted )

src/First.hs:22:21: error:
    parse error (possibly incorrect indentation or mismatched brackets)
   |
22 | myconcat :: [[a]] ->
   |                     ^
Failed, no modules loaded.
2022-06-30 15:30:09.477632399
>>> :l src/First.hs
[1 of 1] Compiling First            ( src/First.hs, interpreted )

src/First.hs:22:21: error:
    parse error (possibly incorrect indentation or mismatched brackets)
   |
22 | myconcat :: [[a]] ->
   |                     ^
Failed, no modules loaded.
2022-06-30 15:30:09.57452148
>>> :e src/First.hs
   1  module First where
   2  
   3  double :: Int -> Int
   4  double x = x + x
   5  
   6  quadruple :: Int -> Int
   7  quadruple x = double (double x)
   8  
   9  factorial :: Integer -> Integer
  10  factorial n = product [1 .. n]
  11  
  12  average :: [Int] -> Int
  13  average xs = sum xs `div` length xs
  14  
  15  ave :: [Int] -> Int
  16  ave xs = div (sum xs) (length xs)
  17  
  18  myinit :: [a] -> [a]
  19  myinit (x:[]) = []
  20  myinit (x:xs) = x : (init xs)
  21  
  22  myconcat :: [[a]] -> [a]
  23  myconcat xss = [ x | xs <- xss, x <- xs]
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-06-30 15:31:40.547176586
>>> :l src/First.hs
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-06-30 15:31:40.584323009
>>> myconcat [[1,2,3],[4,5],[6.7.8.9]]

<interactive>:19:1: error:
    • Non type-variable argument in the constraint: Fractional (b -> c)
      (Use FlexibleContexts to permit this)
    • When checking the inferred type
        it :: forall {b} {c} {a}.
              (Fractional (b -> c), Fractional (a -> b), Num (a -> c)) =>
              [a -> c]
2022-06-30 15:33:20.445747364
>>> [ 1 | _ <- [1 .. 5] ]
[1,1,1,1,1]
2022-06-30 15:47:37.825999458
>>> l scr/First.hs

<interactive>:21:7: error: Not in scope: ‘First.hs’
2022-06-30 15:51:08.808998775
>>> l src/First.hs

<interactive>:22:7: error: Not in scope: ‘First.hs’
2022-06-30 15:52:41.422938626
>>> :e src/First.hs
   1  module First where
   2  
   3  double :: Int -> Int
   4  double x = x + x
   5  
   6  quadruple :: Int -> Int
   7  quadruple x = double (double x)
   8  
   9  factorial :: Integer -> Integer
  10  factorial n = product [1 .. n]
  11  
  12  average :: [Int] -> Int
  13  average xs = sum xs `div` length xs
  14  
  15  ave :: [Int] -> Int
  16  ave xs = div (sum xs) (length xs)
  17  
  18  myinit :: [a] -> [a]
  19  myinit (x:[]) = []
  20  myinit (x:xs) = x : (init xs)
  21  
  22  myconcat :: [[a]] -> [a]
  23  myconcat xss = [ x | xs <- xss, x <- xs]
  24  
  25  mylength :: [a] -> Int
  26  mylength xs = sum [ 1 | _ <- xs]
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-06-30 15:54:10.384504284
>>> :l src/First.hs
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-06-30 15:54:10.482440329
>>> mylength ['a' .. 'z']
26
2022-06-30 15:55:51.276482108
>>> ['a' .. 'z']
"abcdefghijklmnopqrstuvwxyz"
2022-06-30 15:56:21.685886605
>>> ['あ' ..'ん']
"\12354\12355\12356\12357\12358\12359\12360\12361\12362\12363\12364\12365\12366\12367\12368\12369\12370\12371\12372\12373\12374\12375\12376\12377\12378\12379\12380\12381\12382\12383\12384\12385\12386\12387\12388\12389\12390\12391\12392\12393\12394\12395\12396\12397\12398\12399\12400\12401\12402\12403\12404\12405\12406\12407\12408\12409\12410\12411\12412\12413\12414\12415\12416\12417\12418\12419\12420\12421\12422\12423\12424\12425\12426\12427\12428\12429\12430\12431\12432\12433\12434\12435"
2022-06-30 15:56:59.045513788
>>> putStrLn it
あぃいぅうぇえぉおかがきぎくぐけげこごさざしじすずせぜそぞただちぢっつづてでとどなにぬねのはばぱひびぴふぶぷへべぺほぼぽまみむめもゃやゅゆょよらりるれろゎわゐゑをん
2022-06-30 15:57:15.154007155
>>> :q
Leaving GHCi.
GHCi, version 9.0.2: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /home/misaki/bprog2022/.ghci
2022-07-07 16:04:51.380294293
>>> :e src/Caesar.hs
   1  module Caesar where
   2  
   3  import Data.Char
Ok, no modules loaded.
2022-07-07 16:05:21.376972452
>>> :l src/Caesar.hs
[1 of 1] Compiling Caesar           ( src/Caesar.hs, interpreted )
Ok, one module loaded.
2022-07-07 16:05:21.412834518
>>> old 'A'

<interactive>:3:1: error:
    • Variable not in scope: old :: Char -> t
    • Perhaps you meant one of these:
        ‘ord’ (imported from Data.Char), ‘odd’ (imported from Prelude)
2022-07-07 16:05:38.844095083
>>> ord 'A'
65
2022-07-07 16:05:55.948111539
>>> ord 'a'
97
2022-07-07 16:06:06.459134584
>>> :q
Leaving GHCi.
GHCi, version 9.0.2: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /home/misaki/bprog2022/.ghci
2022-07-14 15:11:07.097941185
>>> :e src/Caesar.hs
   1  module Caesar where
   2  
   3  import Data.Char
   4  
   5  let2int :: Char -> Int
   6  let2int c = ord c
Ok, no modules loaded.
2022-07-14 15:11:36.445846498
>>> :l src/Caesar.hs
[1 of 1] Compiling Caesar           ( src/Caesar.hs, interpreted )
Ok, one module loaded.
2022-07-14 15:11:36.489381584
>>> let2int 'a'
97
2022-07-14 15:11:55.547987996
>>> lae

<interactive>:4:1: error: Variable not in scope: lae
2022-07-14 15:13:15.162275913
>>> let2int '2'
50
2022-07-14 15:13:27.190510756
>>> let2int 'z'
122
2022-07-14 15:13:58.041994195
>>> :e
   1  module Caesar where
   2  
   3  import Data.Char
   4  
   5  let2int :: Char -> Int
   6  let2int c = ord c
Ok, one module loaded.
2022-07-14 15:15:14.181449614
>>> let2int 'a'
97
2022-07-14 15:15:22.132082442
>>> :e
   1  module Caesar where
   2  
   3  import Data.Char
   4  
   5  let2int :: Char -> Int
   6  let2int c = ord c - ord 'a'
[1 of 1] Compiling Caesar           ( src/Caesar.hs, interpreted )
Ok, one module loaded.
2022-07-14 15:16:11.236903517
>>> let2int 'a'
0
2022-07-14 15:16:18.966493792
>>> let2int 'z'
25
2022-07-14 15:16:26.577548936
>>> ord 'a'
97
2022-07-14 15:18:59.091776586
>>> chr 97
'a'
2022-07-14 15:19:13.317855743
>>> :e
   1  module Caesar where
   2  
   3  import Data.Char
   4  
   5  let2int :: Char -> Int
   6  let2int c = ord c - ord 'a'
   7  
   8  int2let :: Int -> Char
   9  int2let i = chr (i + ord 'a')
[1 of 1] Compiling Caesar           ( src/Caesar.hs, interpreted )
Ok, one module loaded.
2022-07-14 15:19:53.735656474
>>> int2let 0
'a'
2022-07-14 15:20:03.41167426
>>> int2let 25
'z'
2022-07-14 15:20:10.318924091
>>> :e
   1  module Caesar where
   2  
   3  import Data.Char
   4  
   5  let2int :: Char -> Int
   6  let2int c = ord c - ord 'a'
   7  
   8  int2let :: Int -> Char
   9  int2let n = chr (ord 'a' + n)
  10  
  11  shift :: Int -> (Char -> Char)
  12  shift n c
  13      | isLower c = int2let ((let2int c + n) 'mod' 26)
  14      | otherwise = c
  15      
[1 of 1] Compiling Caesar           ( src/Caesar.hs, interpreted )

src/Caesar.hs:13:44: error:
    • Syntax error on 'mod'
      Perhaps you intended to use TemplateHaskell or TemplateHaskellQuotes
    • In the Template Haskell quotation 'mod'
   |
13 |     | isLower c = int2let ((let2int c + n) 'mod' 26)
   |                                            ^^^^^
Failed, no modules loaded.
2022-07-14 15:27:28.133049987
>>> :e
   1  module Caesar where
   2  
   3  import Data.Char
   4  
   5  let2int :: Char -> Int
   6  let2int c = ord c - ord 'a'
   7  
   8  int2let :: Int -> Char
   9  int2let n = chr (ord 'a' + n)
  10  
  11  shift :: Int -> (Char -> Char)
  12  shift n c
  13      | isLower c = int2let ((let2int c + n) `mod` 26)
  14      | otherwise = c
[1 of 1] Compiling Caesar           ( src/Caesar.hs, interpreted )
Ok, one module loaded.
2022-07-14 15:28:43.317820074
>>> shift 3 'a'
'd'
2022-07-14 15:28:56.032762524
>>> shift (-3) 'd'
'a'
2022-07-14 15:29:11.106498441
>>> shift 3 'z'
'c'
2022-07-14 15:29:36.928558788
>>> shift 3 ' '
' '
2022-07-14 15:33:00.961490482
>>> :e
   1  module Caesar where
   2  
   3  import Data.Char
   4  
   5  let2int :: Char -> Int
   6  let2int c = ord c - ord 'a'
   7  
   8  int2let :: Int -> Char
   9  int2let n = chr (ord 'a' + n)
  10  
  11  shift :: Int -> (Char -> Char)
  12  shift n c
  13      | isLower c = int2let ((let2int c + n) `mod` 26)
  14      | otherwise = c
  15  
  16  encode :: Int -> (String -> String)
  17  encode n xs = [ shift n x | x <- xs ]
[1 of 1] Compiling Caesar           ( src/Caesar.hs, interpreted )
Ok, one module loaded.
2022-07-14 15:36:13.188777256
>>> encode 3 "haskell is fun"
"kdvnhoo lv ixq"
2022-07-14 15:36:40.994353286
>>> it
"kdvnhoo lv ixq"
2022-07-14 15:48:19.34876761
>>> encode (-3) it
"haskell is fun"
2022-07-14 15:49:17.20685367
>>> 
2022-07-14 15:59:19.736248782
>>> :e
   1  module Caesar where
   2  
   3  import Data.Char
   4  
   5  let2int :: Char -> Int
   6  let2int c = ord c - ord 'a'
   7  
   8  int2let :: Int -> Char
   9  int2let n = chr (ord 'a' + n)
  10  
  11  shift :: Int -> (Char -> Char)
  12  shift n c
  13      | isLower c = int2let ((let2int c + n) `mod` 26)
  14      | otherwise = c
  15  
  16  encode :: Int -> (String -> String)
  17  encode n xs = [ shift n x | x <- xs ]
  18  
  19  table :: [Float]
  20  table = [8.1, 1.5, 2.8, 4.2, 12.7, 2.2, 2.0, 6.1, 7.0
  21          , 0.2, 0.8, 4.0, 2.4, 6.7, 7.5, 1.9, 0.1, 6.0
  22          , 6.3, 9.0, 2.8, 1.0, 2.4, 0.2, 2.0, 0.1
  23          ]
[1 of 1] Compiling Caesar           ( src/Caesar.hs, interpreted )
Ok, one module loaded.
2022-07-14 15:59:24.695900693
>>> lenght table

<interactive>:29:1: error:
    • Variable not in scope: lenght :: [Float] -> t
    • Perhaps you meant ‘length’ (imported from Prelude)
2022-07-14 15:59:34.626035691
>>> length table
26
2022-07-14 16:01:35.653270471
>>> :e
   1  module Caesar where
   2  
   3  import Data.Char
   4  
   5  let2int :: Char -> Int
   6  let2int c = ord c - ord 'a'
   7  
   8  int2let :: Int -> Char
   9  int2let n = chr (ord 'a' + n)
  10  
  11  shift :: Int -> (Char -> Char)
  12  shift n c
  13      | isLower c = int2let ((let2int c + n) `mod` 26)
  14      | otherwise = c
  15  
  16  encode :: Int -> (String -> String)
  17  encode n xs = [ shift n x | x <- xs ]
  18  
  19  table :: [Float]
  20  table = [8.1, 1.5, 2.8, 4.2, 12.7, 2.2, 2.0, 6.1, 7.0
  21          , 0.2, 0.8, 4.0, 2.4, 6.7, 7.5, 1.9, 0.1, 6.0
  22          , 6.3, 9.0, 2.8, 1.0, 2.4, 0.2, 2.0, 0.1
  23          ]
  24  
  25  percent :: Int -> Int -> Float
  26  percent n m = n / m * 100
[1 of 1] Compiling Caesar           ( src/Caesar.hs, interpreted )

src/Caesar.hs:26:15: error:
    • Couldn't match expected type ‘Float’ with actual type ‘Int’
    • In the expression: n / m * 100
      In an equation for ‘percent’: percent n m = n / m * 100
   |
26 | percent n m = n / m * 100
   |               ^^^^^^^^^^^
Failed, no modules loaded.
2022-07-14 16:07:01.003458322
>>> :e
   1  module Caesar where
   2  
   3  import Data.Char
   4  
   5  let2int :: Char -> Int
   6  let2int c = ord c - ord 'a'
   7  
   8  int2let :: Int -> Char
   9  int2let n = chr (ord 'a' + n)
  10  
  11  shift :: Int -> (Char -> Char)
  12  shift n c
  13      | isLower c = int2let ((let2int c + n) `mod` 26)
  14      | otherwise = c
  15  
  16  encode :: Int -> (String -> String)
  17  encode n xs = [ shift n x | x <- xs ]
  18  
  19  table :: [Float]
  20  table = [8.1, 1.5, 2.8, 4.2, 12.7, 2.2, 2.0, 6.1, 7.0
  21          , 0.2, 0.8, 4.0, 2.4, 6.7, 7.5, 1.9, 0.1, 6.0
  22          , 6.3, 9.0, 2.8, 1.0, 2.4, 0.2, 2.0, 0.1
  23          ]
  24  
  25  percent :: Int -> Int -> Float
  26  percent n m = (fromIntegral n / fromIntegral m) * 100
[1 of 1] Compiling Caesar           ( src/Caesar.hs, interpreted )
Ok, one module loaded.
2022-07-14 16:08:44.273180353
>>> percent 5 15
33.333336
2022-07-14 16:08:52.932027082
>>> count 's' "Mississippi"

<interactive>:34:1: error:
    Variable not in scope: count :: Char -> t0 -> t
2022-07-14 16:14:58.693234424
>>> :e
   1  module Caesar where
   2  
   3  import Data.Char
   4  
   5  let2int :: Char -> Int
   6  let2int c = ord c - ord 'a'
   7  
   8  int2let :: Int -> Char
   9  int2let n = chr (ord 'a' + n)
  10  
  11  shift :: Int -> (Char -> Char)
  12  shift n c
  13      | isLower c = int2let ((let2int c + n) `mod` 26)
  14      | otherwise = c
  15  
  16  encode :: Int -> (String -> String)
  17  encode n xs = [ shift n x | x <- xs ]
  18  
  19  table :: [Float]
  20  table = [8.1, 1.5, 2.8, 4.2, 12.7, 2.2, 2.0, 6.1, 7.0
  21          , 0.2, 0.8, 4.0, 2.4, 6.7, 7.5, 1.9, 0.1, 6.0
  22          , 6.3, 9.0, 2.8, 1.0, 2.4, 0.2, 2.0, 0.1
  23          ]
  24  
  25  percent :: Int -> Int -> Float
  26  percent n m = (fromIntegral n / fromIntegral m) * 100
  27  
  28  count :: Char -> (String -> Int)
  29  count x xs = length [x' | x' <- xs, x == x']
[1 of 1] Compiling Caesar           ( src/Caesar.hs, interpreted )
Ok, one module loaded.
2022-07-14 16:15:07.412782895
>>> count 's' "Mississippi"
4
2022-07-14 16:15:26.203910271
>>> :q
Leaving GHCi.
